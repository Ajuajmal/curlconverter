var cookie = require('cookie');
var stringArgv = require('string-argv');
var parseArgs = require('minimist');

var parseCurlCommand = function(curlCommand) {
    var argumentArray = stringArgv.parseArgsStringToArgv(curlCommand);
    var parsedArguments = parseArgs(argumentArray);

    // minimist fails to parse double quoted json properly
    // hack around that
    if (parsedArguments['data-binary']) {
        var re = /--data-binary '([{}A-z0-9"\s:]+)'/;
        var groups = re.exec(curlCommand);
        if (groups) {
            parsedArguments['data-binary'] = groups[1];
        }
    }

    var cookieString;
    var cookies;
    var url = parsedArguments._[1];
    var headers = null;
    var username = null;
    var password = null;
    var verbose = null;
    var user_agent = null;
    var referer = null;

    if (parsedArguments.v) { verbose = true; }
    if (parsedArguments.verbose) { verbose = true; }

    if (parsedArguments.H) {
      if (headers === null) { headers = {} ; }
        if (typeof(parsedArguments.H) === 'string') {
          parsedArguments.H = [ parsedArguments.H ];
        }
        parsedArguments.H.forEach(function (header) {
            if (header.indexOf('Cookie') !== -1) {
                cookieString = header;
            } else {
                var colonIndex = header.indexOf(':');
                var headerName = header.substring(0, colonIndex);
                var headerValue = header.substring(colonIndex + 1).trim();
                headers[headerName] = headerValue;
            }
        });
    }

    if (parsedArguments.header) {
        if (headers === null) { headers = {} ; }
        if (typeof(parsedArguments.header) === 'string') {
          parsedArguments.header = [ parsedArguments.header ];
        }
        parsedArguments.header.forEach(function (header) {
            if (header.indexOf('Cookie') !== -1) {
                cookieString = header;
            } else {
                var colonIndex = header.indexOf(':');
                var headerName = header.substring(0, colonIndex);
                var headerValue = header.substring(colonIndex + 1).trim();
                headers[headerName] = headerValue;
            }
        });
    }

    if (parsedArguments.u) {
      if (username === null) { username = "" ; }
      if (password === null) { password = "" ; }
      var colonIndex = parsedArguments.u.indexOf(':');
      username = parsedArguments.u.substring(0, colonIndex);
      password = parsedArguments.u.substring(colonIndex + 1).trim();
    }

    if (parsedArguments.user) {
      if (username === null) { username = "" ; }
      if (password === null) { password = "" ; }
      var colonIndex = parsedArguments.user.indexOf(':');
      username = parsedArguments.user.substring(0, colonIndex);
      password = parsedArguments.user.substring(colonIndex + 1).trim();
    }

    if (parsedArguments.A) { user_agent = parsedArguments.A; }
    if (parsedArguments["user-agent"]) { user_agent = parsedArguments["user-agent"]; }

    if (parsedArguments.e) { referer = parsedArguments.e; }
    if (parsedArguments.referer) { referer = parsedArguments.referer; }

    if (cookieString) {
        var cookieParseOptions = {
            decode: function(s) {return s;}
        };
        cookies = cookie.parse(cookieString.replace('Cookie: ', ''), cookieParseOptions);
    }

    var method;
    if (parsedArguments.X === 'POST') {
        method = 'post';
    } else if (parsedArguments.data || parsedArguments['data-binary']) {
        method = 'post';
    } else {
        method = 'get';
    }

    var request = {
      url: url,
      method: method
    };

    if (headers) { request.headers = headers; }
    if (cookies) { request.cookies = cookies; }
    if (username) { request.username = username; }
    if (password) { request.password = password; }
    if (verbose) { request.verbose = verbose; }
    if (user_agent) { request.user_agent = user_agent; }
    if (referer) { request.verbose = referer; }

    if (parsedArguments.data) {
        request.data = parsedArguments.data;
    } else if (parsedArguments['data-binary']) {
        request.data = parsedArguments['data-binary'];
    }

    return request;

};

module.exports = {
  parseCurlCommand: parseCurlCommand
};
